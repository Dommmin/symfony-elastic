version: '3.8'

services:
  nginx:
    build:
      context: .
      dockerfile: .docker/nginx/Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    command: sh -c "nginx -g \"daemon off;\""
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - .:/var/www
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - php
    networks:
      - symfony

  php:
    build:
      context: .
      dockerfile: .docker/php/Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_php
    restart: unless-stopped
    volumes:
      - .:/var/www
      - ./.docker/php/php-dev.ini:/usr/local/etc/php/conf.d/php.ini
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "9000:9000"
      - "5173:5173"
    environment:
      - APP_ENV=local
    networks:
      - symfony

  db:
    image: mysql:latest
    container_name: ${COMPOSE_PROJECT_NAME}_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - symfony

  redis:
    image: redis:alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - symfony

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.4
    container_name: ${COMPOSE_PROJECT_NAME}_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - bootstrap.memory_lock=true # Zapobiega swapowaniu, co poprawia wydajność
      - cluster.routing.allocation.disk.threshold_enabled=false # Wyłącza ochronę przed niskim stanem dysku
      - action.destructive_requires_name=false  # Umożliwia operacje usuwania bez podania nazwy indeksu
      - indices.recovery.max_bytes_per_sec=50mb # Zwiększa limit prędkości odzyskiwania
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - symfony
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 10s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.4
    container_name: ${COMPOSE_PROJECT_NAME}_kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - symfony

  mailhog:
    image: mailhog/mailhog:latest
    container_name: ${COMPOSE_PROJECT_NAME}_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - symfony

volumes:
  db_data:
    driver: local

  es_data:
    driver: local

networks:
  symfony:
    driver: bridge